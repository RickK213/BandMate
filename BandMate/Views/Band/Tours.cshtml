@using BandMate.Models
@model BandMate.Models.BandTourViewModel

@{
    ViewBag.Title = "Band Tours";
    Layout = "~/Views/Shared/_ManagerLayout.cshtml";
}


<div class="panel panel-default">
    <div class="panel-heading clearfix">
        <h3 class="panel-title pull-left">@Model.CurrentBand.Name Tours</h3>
    </div>
    <div class="panel-body">
        <h4>Create New Tour</h4>
        <form class="form-inline" action="/Tour/Create" method="POST">
            <input type="hidden" name="bandId" value="@Model.CurrentBand.BandId" />
            <div class="form-group">
                <label for="tourName">Tour Name</label>
                <input type="text" class="form-control" name="tourName" placeholder="i.e. Summer 2018">
            </div>
            <button type="submit" class="btn btn-primary">Create Tour</button>
        </form>
        @if (Model.CurrentBandTours.Count>0)
        {
            <hr />
            <h4>Current Tours</h4>
            <div class="row">
                @{int count = 1; }
                @foreach (Tour tour in Model.CurrentBandTours)
                {
                    <div class="col-sm-6 col-md-4">
                        <div class="thumbnail">
                            <div class="caption">
                                <h4>@tour.Name</h4>
                                <p class="text-success">
                                    <strong>@tour.TourDates.Count Tour Dates</strong>
                                </p>
                                <p>
                                    <a class="btn btn-primary btn-sm btn-block" href="@Url.Action("Details", "Tour", new { tourId = tour.TourId, bandId = Model.CurrentBand.BandId })"><span class="glyphicon glyphicon-info-sign" aria-hidden="true"></span> Tour Details</a>
                                </p>
                                <p>
                                    <a class="btn btn-success btn-sm btn-block" href="@Url.Action("Create", "TourDate", new { tourId = tour.TourId, bandId = Model.CurrentBand.BandId })"><span class="glyphicon glyphicon-plus-sign" aria-hidden="true"></span> Add Tour Date</a>
                                </p>
                                <div class="btn-group btn-group-justified" role="group">
                                    <div class="btn-group">
                                        <a class="btn btn-info btn-sm" href="@Url.Action("Edit", "Tour", new { tourId = tour.TourId, bandId = Model.CurrentBand.BandId })"><span class="glyphicon glyphicon-cog" aria-hidden="true"></span> Settings</a>
                                    </div>
                                    <div class="btn-group">
                                        <a data-toggle="tooltip" data-placement="top" title="You Cannot Undo This!" class="btn btn-danger btn-sm" href="@Url.Action("Delete", "Tour", new { tourId = tour.TourId, bandId = Model.CurrentBand.BandId })"><span class="glyphicon glyphicon-trash" aria-hidden="true"></span> Delete</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    if (count % 3 == 0)
                    {
                        @:</div><div class="row">
                    }
                    count++;
                }
            </div>
        }
    </div>
</div>

<div class="panel panel-default" id="appearanceFeeChart">
    <div class="panel-heading clearfix">
        <h3 class="panel-title pull-left">@Model.CurrentBand.Name Appearance Fees Collected Over The Past 5 Days</h3>
    </div>
    <div class="panel-body">
        <div class="ct-chart ct-golden-section"></div>
    </div>
</div>
@section Scripts{
    <script type="text/javascript">
        $("document").ready(function(){
            //var data = {
            //    // A labels array that can contain any sort of values
            //    labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'],
            //    // Our series array that contains series objects or in this case series data arrays
            //    series: [
            //      [5, 2, 4, 2, 0]
            //    ]
            //};
            var data = @Html.Raw(HttpUtility.HtmlDecode(Model.ChartData))

            // Create a new line chart object where as first parameter we pass in a selector
            // that is resolving to our chart container element. The Second parameter
            // is the actual data object.
            var options = {
                // Don't draw the line chart points
                //showPoint: true,
                // Disable line smoothing
                //lineSmooth: false,
                // X-Axis specific configuration
                axisX: {
                    // We can disable the grid for this axis
                    showGrid: true,
                    // and also don't show the label
                    showLabel: true
                },
                // Y-Axis specific configuration
                axisY: {
                    // Lets offset the chart a bit from the labels
                    //offset: 60,
                    // The label interpolation function enables you to modify the values
                    // used for the labels on each axis. Here we are converting the
                    // values into million pound.
                    labelInterpolationFnc: function(value) {
                        return '$' + value + '';
                    }
                }
            };        
            new Chartist.Bar('.ct-chart', data, options);
        
            //check for all zero values
            let total = 0;
            for(let i=0; i<data.series[0].length; i++)
            {
                total += data.series[0][i];
            }
            if ( total === 0 )
            {
                $("#appearanceFeeChart").hide();
            }
        });

    </script>
}